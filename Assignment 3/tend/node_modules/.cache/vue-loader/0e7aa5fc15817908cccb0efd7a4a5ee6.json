{"remainingRequest":"/home/brandon/Documents/Independent Programming/tend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/brandon/Documents/Independent Programming/tend/src/components/PlantProfilePrivate.vue?vue&type=style&index=0&id=89803428&scoped=true&lang=css","dependencies":[{"path":"/home/brandon/Documents/Independent Programming/tend/src/components/PlantProfilePrivate.vue","mtime":1632345285491},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1632324173000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":1632324173000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5tb2RlLXRvZ2dsZS1jb250YWluZXIgewoJd2lkdGg6IDEwMCU7CglkaXNwbGF5OiBmbGV4OwoJanVzdGlmeS1jb250ZW50OiBjZW50ZXI7Cn0KCi5wbGFudHMtY29udGFpbmVyIHsKCXdpZHRoOiAzMzBweDsKCWhlaWdodDogOTB2aDsKCW92ZXJmbG93LXk6IHNjcm9sbDsKCW92ZXJmbG93LXg6IGhpZGRlbjsKCW1hcmdpbi1sZWZ0OiAyMHB4OwoJYm9yZGVyLXJhZGl1czogMjBweDsKCWJveC1zaGFkb3c6IC0xMHB4IDAgMTBweCAtNXB4IGdyZXk7CgoJZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgouaW1hZ2UtY29udGFpbmVyIHsKCXBvc2l0aW9uOiByZWxhdGl2ZTsKfQoKLnBsYW50LWltYWdlIHsKCXdpZHRoOiA5OCU7CgltYXgtaGVpZ2h0OiA4MHZoOwoJYm9yZGVyOiAzcHggc29saWQgI2I4N2Q0YjsKCWJvcmRlci1yYWRpdXM6IDIwcHg7Cglib3gtc2hhZG93OiAwIDVweCA1cHggZ3JleTsKfQoKLnNldHRpbmdzLWNvbnRhaW5lciB7Cglwb3NpdGlvbjogcmVsYXRpdmU7CglmbG9hdDogcmlnaHQ7CgltYXgtd2lkdGg6IDk1dnc7CgltYXJnaW4tcmlnaHQ6IDIuNXZ3OwoJZGlzcGxheTogZmxleDsKCWZsZXgtd3JhcDogd3JhcDsKCWp1c3RpZnktY29udGVudDogY2VudGVyOwp9CgoubmFtZS1pbnB1dCB7Cgl3aWR0aDogMTAwJTsKCWZvbnQtc2l6ZTogNHJlbTsKCWNvbG9yOiAjM2Y0NjNkOwoJcGFkZGluZy1ib3R0b206IDFyZW07Cn0KCi5zZXR0aW5ncyB7Cgl3aWR0aDogOTAlOwoJbWFyZ2luOiAxMCU7Cn0KCkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHsKCS5wbGFudC1pbWFnZSB7CgkJd2lkdGg6IDUwJTsKCX0KfQoKQG1lZGlhIChtYXgtd2lkdGg6IDg1MHB4KSB7CgkucGxhbnRzLWNvbnRhaW5lciB7CgkJZGlzcGxheTogbm9uZTsKCX0KfQo="},{"version":3,"sources":["/home/brandon/Documents/Independent Programming/tend/src/components/PlantProfilePrivate.vue"],"names":[],"mappings":"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","file":"/home/brandon/Documents/Independent Programming/tend/src/components/PlantProfilePrivate.vue","sourceRoot":"","sourcesContent":["<!--\nDescription: \tThe private profile page for a plant. Will allow the user to \n\t\t\t\tchange settings, and perform actions. Gets its information through the url path, and the vuex store.\n-->\n\n<template>\n\t<!-- Don't load the component if the id in the URL is not valid. -->\n\t<div\n\t\tv-if=\"validId\"\n\t\tstyle=\"position: relative; display:flex; justify-content: center;\"\n\t>\n\t\t<div class=\"plants-container\">\n\t\t\t<ImageGallery\n\t\t\t\t:images=\"plants\"\n\t\t\t\t@itemClick=\"onImageClick\"\n\t\t\t\t@moreImages=\"getImageData\"\n\t\t\t/>\n\t\t</div>\n\n\t\t<div class=\"settings-container\" :style=\"{ width: width }\">\n\t\t\t<Input\n\t\t\t\tstealth\n\t\t\t\tclass=\"name-input\"\n\t\t\t\tv-model=\"plant.subtitle\"\n\t\t\t\t@blur=\"updateName\"\n\t\t\t/>\n\t\t\t<div class=\"image-container\">\n\t\t\t\t<CardImageSwipeWrapper\n\t\t\t\t\t:imageSource=\"plant.imageSource\"\n\t\t\t\t\t:actions=\"plant.actions\"\n\t\t\t\t\t@performAction=\"performAction\"\n\t\t\t\t\t@swipeLeft=\"previousPlant\"\n\t\t\t\t\t@swipeRight=\"nextPlant\"\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div class=\"mode-toggle-container\">\n\t\t\t\t<Button @click=\"activeTab = 'PlantProfilePrivateSettings'\">\n\t\t\t\t\tPrivate\n\t\t\t\t</Button>\n\t\t\t\t<Button @click=\"activeTab = 'PlantProfileBiography'\">\n\t\t\t\t\tPublic\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t<!-- Toggles between the public and private settings with the buttons above. -->\n\t\t\t<div class=\"settings\">\n\t\t\t\t<component\n\t\t\t\t\t:is=\"activeTab\"\n\t\t\t\t\tv-bind=\"getProps\"\n\t\t\t\t\t@update:settings=\"\n\t\t\t\t\t\t(settings) => {\n\t\t\t\t\t\t\tplant.settings = settings;\n\t\t\t\t\t\t\tupdatePlant(plant);\n\t\t\t\t\t\t}\n\t\t\t\t\t\"\n\t\t\t\t\t@update:biography=\"\n\t\t\t\t\t\t(biography) => {\n\t\t\t\t\t\t\tplant.text = biography;\n\t\t\t\t\t\t\tupdatePlant(plant);\n\t\t\t\t\t\t}\n\t\t\t\t\t\"\n\t\t\t\t\t@delete=\"confirmThenDeletePlant\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { useRoute, useRouter, onBeforeRouteUpdate } from \"vue-router\";\nimport { ref, computed } from \"vue\";\nimport { useStore } from \"vuex\";\nimport windowSizeWatcher from \"../composables/windowSizeWatcher\";\nimport ImageGallery from \"./ImageGallery.vue\";\nimport PlantProfilePrivateSettings from \"./PlantProfilePrivateSettings.vue\";\nimport PlantProfileBiography from \"./PlantProfileBiography.vue\";\nimport Input from \"./AppInput.vue\";\nimport Button from \"./AppButton.vue\";\nimport CardImageSwipeWrapper from \"./CardImageSwipeWrapper.vue\";\nimport checkForValidId from \"../composables/checkForValidId.js\";\n\nconst GALLERY_WIDTH = 330;\nconst SETTINGS_MARGIN = 80;\n\nexport default {\n\tname: \"PlantProfilePrivate\",\n\tcomponents: {\n\t\tImageGallery,\n\t\tPlantProfilePrivateSettings,\n\t\tInput,\n\t\tButton,\n\t\tPlantProfileBiography,\n\t\tCardImageSwipeWrapper,\n\t},\n\tsetup() {\n\t\tconst route = useRoute();\n\t\tconst router = useRouter();\n\n\t\t//  Get the plant information from the store.\n\t\tconst id = ref(route.params.id);\n\t\tconst store = useStore();\n\t\tconst plant = ref(store.getters[\"plants/one\"](id.value));\n\n\t\t// Check to ensure the ID is valid.\n\t\tconst validId = ref(checkForValidId(router, plant.value));\n\t\tif (!validId.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeTab = ref(\"PlantProfilePrivateSettings\");\n\t\tconst plants = ref(store.getters[\"plants/all\"]);\n\n\t\t//  Create props for the dynamic components.\n\t\tconst getProps = computed(() => {\n\t\t\tif (activeTab.value == \"PlantProfilePrivateSettings\") {\n\t\t\t\treturn {\n\t\t\t\t\tid: plant.value.id,\n\t\t\t\t\tsettings: plant.value.settings,\n\t\t\t\t};\n\t\t\t} else if (activeTab.value == \"PlantProfileBiography\") {\n\t\t\t\treturn {\n\t\t\t\t\tbiography: plant.value.text,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {};\n\t\t});\n\n\t\t// Dynamically assign the width of the settings based on the width of the gallery.\n\t\tconst width = ref();\n\t\tconst resizeSettings = () => {\n\t\t\tif (window.innerWidth > 850) {\n\t\t\t\twidth.value = `${window.innerWidth -\n\t\t\t\t\tGALLERY_WIDTH -\n\t\t\t\t\tSETTINGS_MARGIN}px`;\n\t\t\t} else {\n\t\t\t\twidth.value = `${window.innerWidth - window.innerWidth / 10}px`;\n\t\t\t}\n\t\t};\n\t\tresizeSettings();\n\t\twindowSizeWatcher(resizeSettings);\n\n\t\t//  Handle changes between different plant ids in the URL\n\t\tonBeforeRouteUpdate((to, from, next) => {\n\t\t\tplant.value = store.getters[\"plants/one\"](to.params.id);\n\t\t\tnext();\n\t\t});\n\n\t\t// Get all plants from the store, and the images to place in the gallery.\n\t\tconst getImageData = () => {\n\t\t\t// New array to trigger watch updates.\n\t\t\tplants.value = [...plants.value, ...store.getters[\"plants/all\"]];\n\t\t};\n\t\t// Go to a new id using Vue-Router\n\t\tconst onImageClick = (plant) => {\n\t\t\trouter.push({ name: \"private-plant\", params: { id: plant.id } });\n\t\t};\n\n\t\t// For mobile users, switch to the previous/next plant.\n\t\tconst previousPlant = () => {\n\t\t\tif (plant.value.id != plants.value[0].id) {\n\t\t\t\trouter.push({\n\t\t\t\t\tname: \"private-plant\",\n\t\t\t\t\tparams: { id: plant.value.id - 1 },\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst nextPlant = () => {\n\t\t\tif (plant.value.id != plants.value[plants.value.length - 1].id) {\n\t\t\t\trouter.push({\n\t\t\t\t\tname: \"private-plant\",\n\t\t\t\t\tparams: { id: plant.value.id + 1 },\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// Water, fertilize or repot a plant.\n\t\tconst performAction = (action) => {\n\t\t\tplant.value.actions = plant.value.actions.filter(\n\t\t\t\t(currentAction) => currentAction != action\n\t\t\t);\n\t\t};\n\n\t\t// Update a plant in the store.\n\t\tconst updatePlant = (updatedPlant) => {\n\t\t\tstore.commit(\"plants/update\", updatedPlant);\n\t\t\tplants.value = [...store.getters[\"plants/all\"]];\n\t\t};\n\n\t\t// First confirm, then delete the plant.\n\t\tconst confirmThenDeletePlant = () => {\n\t\t\tif (\n\t\t\t\tconfirm(`Are you sure you want to delete ${plant.value.title}`)\n\t\t\t) {\n\t\t\t\tstore.commit(\"plants/delete\", plant.value.id);\n\t\t\t\trouter.push({ name: \"my-plants\" });\n\t\t\t}\n\t\t};\n\n\t\t// Load first round of images\n\t\tgetImageData();\n\n\t\tconst updateName = () => {\n\t\t\tstore.commit(\"plants/update\", plant.value);\n\t\t};\n\n\t\treturn {\n\t\t\tid,\n\t\t\tplant,\n\t\t\tupdateName,\n\t\t\tplants,\n\t\t\tonImageClick,\n\t\t\twidth,\n\t\t\tactiveTab,\n\t\t\tgetImageData,\n\t\t\tgetProps,\n\t\t\tupdatePlant,\n\t\t\tperformAction,\n\t\t\tpreviousPlant,\n\t\t\tnextPlant,\n\t\t\tconfirmThenDeletePlant,\n\t\t\tvalidId,\n\t\t};\n\t},\n};\n</script>\n\n<style scoped>\n.mode-toggle-container {\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n}\n\n.plants-container {\n\twidth: 330px;\n\theight: 90vh;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tmargin-left: 20px;\n\tborder-radius: 20px;\n\tbox-shadow: -10px 0 10px -5px grey;\n\n\tdisplay: inline-block;\n}\n\n.image-container {\n\tposition: relative;\n}\n\n.plant-image {\n\twidth: 98%;\n\tmax-height: 80vh;\n\tborder: 3px solid #b87d4b;\n\tborder-radius: 20px;\n\tbox-shadow: 0 5px 5px grey;\n}\n\n.settings-container {\n\tposition: relative;\n\tfloat: right;\n\tmax-width: 95vw;\n\tmargin-right: 2.5vw;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n}\n\n.name-input {\n\twidth: 100%;\n\tfont-size: 4rem;\n\tcolor: #3f463d;\n\tpadding-bottom: 1rem;\n}\n\n.settings {\n\twidth: 90%;\n\tmargin: 10%;\n}\n\n@media (min-width: 1200px) {\n\t.plant-image {\n\t\twidth: 50%;\n\t}\n}\n\n@media (max-width: 850px) {\n\t.plants-container {\n\t\tdisplay: none;\n\t}\n}\n</style>\n"]}]}