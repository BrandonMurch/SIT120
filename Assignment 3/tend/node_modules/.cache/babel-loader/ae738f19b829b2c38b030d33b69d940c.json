{"remainingRequest":"/home/brandon/Documents/Independent Programming/tend/node_modules/thread-loader/dist/cjs.js!/home/brandon/Documents/Independent Programming/tend/node_modules/babel-loader/lib/index.js!/home/brandon/Documents/Independent Programming/tend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/brandon/Documents/Independent Programming/tend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/brandon/Documents/Independent Programming/tend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/brandon/Documents/Independent Programming/tend/src/components/PlantProfilePrivate.vue?vue&type=template&id=89803428&scoped=true","dependencies":[{"path":"/home/brandon/Documents/Independent Programming/tend/src/components/PlantProfilePrivate.vue","mtime":1632345285491},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632324173000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":1632324173000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIHdpdGhDdHggYXMgX3dpdGhDdHgsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50IGFzIF9yZXNvbHZlRHluYW1pY0NvbXBvbmVudCwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgbm9ybWFsaXplU3R5bGUgYXMgX25vcm1hbGl6ZVN0eWxlLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gInZ1ZSI7Cgp2YXIgX3dpdGhTY29wZUlkID0gZnVuY3Rpb24gX3dpdGhTY29wZUlkKG4pIHsKICByZXR1cm4gX3B1c2hTY29wZUlkKCJkYXRhLXYtODk4MDM0MjgiKSwgbiA9IG4oKSwgX3BvcFNjb3BlSWQoKSwgbjsKfTsKCnZhciBfaG9pc3RlZF8xID0gewogIGtleTogMCwKICBzdHlsZTogewogICAgInBvc2l0aW9uIjogInJlbGF0aXZlIiwKICAgICJkaXNwbGF5IjogImZsZXgiLAogICAgImp1c3RpZnktY29udGVudCI6ICJjZW50ZXIiCiAgfQp9Owp2YXIgX2hvaXN0ZWRfMiA9IHsKICBjbGFzczogInBsYW50cy1jb250YWluZXIiCn07CnZhciBfaG9pc3RlZF8zID0gewogIGNsYXNzOiAiaW1hZ2UtY29udGFpbmVyIgp9Owp2YXIgX2hvaXN0ZWRfNCA9IHsKICBjbGFzczogIm1vZGUtdG9nZ2xlLWNvbnRhaW5lciIKfTsKCnZhciBfaG9pc3RlZF81ID0gLyojX19QVVJFX18qL19jcmVhdGVUZXh0Vk5vZGUoIiBQcml2YXRlICIpOwoKdmFyIF9ob2lzdGVkXzYgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiIFB1YmxpYyAiKTsKCnZhciBfaG9pc3RlZF83ID0gewogIGNsYXNzOiAic2V0dGluZ3MiCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9jb21wb25lbnRfSW1hZ2VHYWxsZXJ5ID0gX3Jlc29sdmVDb21wb25lbnQoIkltYWdlR2FsbGVyeSIpOwoKICB2YXIgX2NvbXBvbmVudF9JbnB1dCA9IF9yZXNvbHZlQ29tcG9uZW50KCJJbnB1dCIpOwoKICB2YXIgX2NvbXBvbmVudF9DYXJkSW1hZ2VTd2lwZVdyYXBwZXIgPSBfcmVzb2x2ZUNvbXBvbmVudCgiQ2FyZEltYWdlU3dpcGVXcmFwcGVyIik7CgogIHZhciBfY29tcG9uZW50X0J1dHRvbiA9IF9yZXNvbHZlQ29tcG9uZW50KCJCdXR0b24iKTsKCiAgcmV0dXJuICRzZXR1cC52YWxpZElkID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzIsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9JbWFnZUdhbGxlcnksIHsKICAgIGltYWdlczogJHNldHVwLnBsYW50cywKICAgIG9uSXRlbUNsaWNrOiAkc2V0dXAub25JbWFnZUNsaWNrLAogICAgb25Nb3JlSW1hZ2VzOiAkc2V0dXAuZ2V0SW1hZ2VEYXRhCiAgfSwgbnVsbCwgOCwgWyJpbWFnZXMiLCAib25JdGVtQ2xpY2siLCAib25Nb3JlSW1hZ2VzIl0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIHsKICAgIGNsYXNzOiAic2V0dGluZ3MtY29udGFpbmVyIiwKICAgIHN0eWxlOiBfbm9ybWFsaXplU3R5bGUoewogICAgICB3aWR0aDogJHNldHVwLndpZHRoCiAgICB9KQogIH0sIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9JbnB1dCwgewogICAgc3RlYWx0aDogIiIsCiAgICBjbGFzczogIm5hbWUtaW5wdXQiLAogICAgbW9kZWxWYWx1ZTogJHNldHVwLnBsYW50LnN1YnRpdGxlLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRzZXR1cC5wbGFudC5zdWJ0aXRsZSA9ICRldmVudDsKICAgIH0pLAogICAgb25CbHVyOiAkc2V0dXAudXBkYXRlTmFtZQogIH0sIG51bGwsIDgsIFsibW9kZWxWYWx1ZSIsICJvbkJsdXIiXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9DYXJkSW1hZ2VTd2lwZVdyYXBwZXIsIHsKICAgIGltYWdlU291cmNlOiAkc2V0dXAucGxhbnQuaW1hZ2VTb3VyY2UsCiAgICBhY3Rpb25zOiAkc2V0dXAucGxhbnQuYWN0aW9ucywKICAgIG9uUGVyZm9ybUFjdGlvbjogJHNldHVwLnBlcmZvcm1BY3Rpb24sCiAgICBvblN3aXBlTGVmdDogJHNldHVwLnByZXZpb3VzUGxhbnQsCiAgICBvblN3aXBlUmlnaHQ6ICRzZXR1cC5uZXh0UGxhbnQKICB9LCBudWxsLCA4LCBbImltYWdlU291cmNlIiwgImFjdGlvbnMiLCAib25QZXJmb3JtQWN0aW9uIiwgIm9uU3dpcGVMZWZ0IiwgIm9uU3dpcGVSaWdodCJdKV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF80LCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQnV0dG9uLCB7CiAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRzZXR1cC5hY3RpdmVUYWIgPSAnUGxhbnRQcm9maWxlUHJpdmF0ZVNldHRpbmdzJzsKICAgIH0pCiAgfSwgewogICAgZGVmYXVsdDogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gW19ob2lzdGVkXzVdOwogICAgfSksCiAgICBfOiAxCiAgfSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0J1dHRvbiwgewogICAgb25DbGljazogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkc2V0dXAuYWN0aXZlVGFiID0gJ1BsYW50UHJvZmlsZUJpb2dyYXBoeSc7CiAgICB9KQogIH0sIHsKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFtfaG9pc3RlZF82XTsKICAgIH0pLAogICAgXzogMQogIH0pXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzcsIFsoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX3Jlc29sdmVEeW5hbWljQ29tcG9uZW50KCRzZXR1cC5hY3RpdmVUYWIpLCBfbWVyZ2VQcm9wcygkc2V0dXAuZ2V0UHJvcHMsIHsKICAgICJvblVwZGF0ZTpzZXR0aW5ncyI6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7CiAgICAgICRzZXR1cC5wbGFudC5zZXR0aW5ncyA9IHNldHRpbmdzOwogICAgICAkc2V0dXAudXBkYXRlUGxhbnQoJHNldHVwLnBsYW50KTsKICAgIH0pLAogICAgIm9uVXBkYXRlOmJpb2dyYXBoeSI6IF9jYWNoZVs0XSB8fCAoX2NhY2hlWzRdID0gZnVuY3Rpb24gKGJpb2dyYXBoeSkgewogICAgICAkc2V0dXAucGxhbnQudGV4dCA9IGJpb2dyYXBoeTsKICAgICAgJHNldHVwLnVwZGF0ZVBsYW50KCRzZXR1cC5wbGFudCk7CiAgICB9KSwKICAgIG9uRGVsZXRlOiAkc2V0dXAuY29uZmlybVRoZW5EZWxldGVQbGFudAogIH0pLCBudWxsLCAxNiwgWyJvbkRlbGV0ZSJdKSldKV0sIDQpXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIiwgdHJ1ZSk7Cn0="},{"version":3,"sources":["/home/brandon/Documents/Independent Programming/tend/src/components/PlantProfilePrivate.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\nDescription: \tThe private profile page for a plant. Will allow the user to \n\t\t\t\tchange settings, and perform actions. Gets its information through the url path, and the vuex store.\n-->\n\n<template>\n\t<!-- Don't load the component if the id in the URL is not valid. -->\n\t<div\n\t\tv-if=\"validId\"\n\t\tstyle=\"position: relative; display:flex; justify-content: center;\"\n\t>\n\t\t<div class=\"plants-container\">\n\t\t\t<ImageGallery\n\t\t\t\t:images=\"plants\"\n\t\t\t\t@itemClick=\"onImageClick\"\n\t\t\t\t@moreImages=\"getImageData\"\n\t\t\t/>\n\t\t</div>\n\n\t\t<div class=\"settings-container\" :style=\"{ width: width }\">\n\t\t\t<Input\n\t\t\t\tstealth\n\t\t\t\tclass=\"name-input\"\n\t\t\t\tv-model=\"plant.subtitle\"\n\t\t\t\t@blur=\"updateName\"\n\t\t\t/>\n\t\t\t<div class=\"image-container\">\n\t\t\t\t<CardImageSwipeWrapper\n\t\t\t\t\t:imageSource=\"plant.imageSource\"\n\t\t\t\t\t:actions=\"plant.actions\"\n\t\t\t\t\t@performAction=\"performAction\"\n\t\t\t\t\t@swipeLeft=\"previousPlant\"\n\t\t\t\t\t@swipeRight=\"nextPlant\"\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div class=\"mode-toggle-container\">\n\t\t\t\t<Button @click=\"activeTab = 'PlantProfilePrivateSettings'\">\n\t\t\t\t\tPrivate\n\t\t\t\t</Button>\n\t\t\t\t<Button @click=\"activeTab = 'PlantProfileBiography'\">\n\t\t\t\t\tPublic\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t<!-- Toggles between the public and private settings with the buttons above. -->\n\t\t\t<div class=\"settings\">\n\t\t\t\t<component\n\t\t\t\t\t:is=\"activeTab\"\n\t\t\t\t\tv-bind=\"getProps\"\n\t\t\t\t\t@update:settings=\"\n\t\t\t\t\t\t(settings) => {\n\t\t\t\t\t\t\tplant.settings = settings;\n\t\t\t\t\t\t\tupdatePlant(plant);\n\t\t\t\t\t\t}\n\t\t\t\t\t\"\n\t\t\t\t\t@update:biography=\"\n\t\t\t\t\t\t(biography) => {\n\t\t\t\t\t\t\tplant.text = biography;\n\t\t\t\t\t\t\tupdatePlant(plant);\n\t\t\t\t\t\t}\n\t\t\t\t\t\"\n\t\t\t\t\t@delete=\"confirmThenDeletePlant\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { useRoute, useRouter, onBeforeRouteUpdate } from \"vue-router\";\nimport { ref, computed } from \"vue\";\nimport { useStore } from \"vuex\";\nimport windowSizeWatcher from \"../composables/windowSizeWatcher\";\nimport ImageGallery from \"./ImageGallery.vue\";\nimport PlantProfilePrivateSettings from \"./PlantProfilePrivateSettings.vue\";\nimport PlantProfileBiography from \"./PlantProfileBiography.vue\";\nimport Input from \"./AppInput.vue\";\nimport Button from \"./AppButton.vue\";\nimport CardImageSwipeWrapper from \"./CardImageSwipeWrapper.vue\";\nimport checkForValidId from \"../composables/checkForValidId.js\";\n\nconst GALLERY_WIDTH = 330;\nconst SETTINGS_MARGIN = 80;\n\nexport default {\n\tname: \"PlantProfilePrivate\",\n\tcomponents: {\n\t\tImageGallery,\n\t\tPlantProfilePrivateSettings,\n\t\tInput,\n\t\tButton,\n\t\tPlantProfileBiography,\n\t\tCardImageSwipeWrapper,\n\t},\n\tsetup() {\n\t\tconst route = useRoute();\n\t\tconst router = useRouter();\n\n\t\t//  Get the plant information from the store.\n\t\tconst id = ref(route.params.id);\n\t\tconst store = useStore();\n\t\tconst plant = ref(store.getters[\"plants/one\"](id.value));\n\n\t\t// Check to ensure the ID is valid.\n\t\tconst validId = ref(checkForValidId(router, plant.value));\n\t\tif (!validId.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeTab = ref(\"PlantProfilePrivateSettings\");\n\t\tconst plants = ref(store.getters[\"plants/all\"]);\n\n\t\t//  Create props for the dynamic components.\n\t\tconst getProps = computed(() => {\n\t\t\tif (activeTab.value == \"PlantProfilePrivateSettings\") {\n\t\t\t\treturn {\n\t\t\t\t\tid: plant.value.id,\n\t\t\t\t\tsettings: plant.value.settings,\n\t\t\t\t};\n\t\t\t} else if (activeTab.value == \"PlantProfileBiography\") {\n\t\t\t\treturn {\n\t\t\t\t\tbiography: plant.value.text,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {};\n\t\t});\n\n\t\t// Dynamically assign the width of the settings based on the width of the gallery.\n\t\tconst width = ref();\n\t\tconst resizeSettings = () => {\n\t\t\tif (window.innerWidth > 850) {\n\t\t\t\twidth.value = `${window.innerWidth -\n\t\t\t\t\tGALLERY_WIDTH -\n\t\t\t\t\tSETTINGS_MARGIN}px`;\n\t\t\t} else {\n\t\t\t\twidth.value = `${window.innerWidth - window.innerWidth / 10}px`;\n\t\t\t}\n\t\t};\n\t\tresizeSettings();\n\t\twindowSizeWatcher(resizeSettings);\n\n\t\t//  Handle changes between different plant ids in the URL\n\t\tonBeforeRouteUpdate((to, from, next) => {\n\t\t\tplant.value = store.getters[\"plants/one\"](to.params.id);\n\t\t\tnext();\n\t\t});\n\n\t\t// Get all plants from the store, and the images to place in the gallery.\n\t\tconst getImageData = () => {\n\t\t\t// New array to trigger watch updates.\n\t\t\tplants.value = [...plants.value, ...store.getters[\"plants/all\"]];\n\t\t};\n\t\t// Go to a new id using Vue-Router\n\t\tconst onImageClick = (plant) => {\n\t\t\trouter.push({ name: \"private-plant\", params: { id: plant.id } });\n\t\t};\n\n\t\t// For mobile users, switch to the previous/next plant.\n\t\tconst previousPlant = () => {\n\t\t\tif (plant.value.id != plants.value[0].id) {\n\t\t\t\trouter.push({\n\t\t\t\t\tname: \"private-plant\",\n\t\t\t\t\tparams: { id: plant.value.id - 1 },\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst nextPlant = () => {\n\t\t\tif (plant.value.id != plants.value[plants.value.length - 1].id) {\n\t\t\t\trouter.push({\n\t\t\t\t\tname: \"private-plant\",\n\t\t\t\t\tparams: { id: plant.value.id + 1 },\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// Water, fertilize or repot a plant.\n\t\tconst performAction = (action) => {\n\t\t\tplant.value.actions = plant.value.actions.filter(\n\t\t\t\t(currentAction) => currentAction != action\n\t\t\t);\n\t\t};\n\n\t\t// Update a plant in the store.\n\t\tconst updatePlant = (updatedPlant) => {\n\t\t\tstore.commit(\"plants/update\", updatedPlant);\n\t\t\tplants.value = [...store.getters[\"plants/all\"]];\n\t\t};\n\n\t\t// First confirm, then delete the plant.\n\t\tconst confirmThenDeletePlant = () => {\n\t\t\tif (\n\t\t\t\tconfirm(`Are you sure you want to delete ${plant.value.title}`)\n\t\t\t) {\n\t\t\t\tstore.commit(\"plants/delete\", plant.value.id);\n\t\t\t\trouter.push({ name: \"my-plants\" });\n\t\t\t}\n\t\t};\n\n\t\t// Load first round of images\n\t\tgetImageData();\n\n\t\tconst updateName = () => {\n\t\t\tstore.commit(\"plants/update\", plant.value);\n\t\t};\n\n\t\treturn {\n\t\t\tid,\n\t\t\tplant,\n\t\t\tupdateName,\n\t\t\tplants,\n\t\t\tonImageClick,\n\t\t\twidth,\n\t\t\tactiveTab,\n\t\t\tgetImageData,\n\t\t\tgetProps,\n\t\t\tupdatePlant,\n\t\t\tperformAction,\n\t\t\tpreviousPlant,\n\t\t\tnextPlant,\n\t\t\tconfirmThenDeletePlant,\n\t\t\tvalidId,\n\t\t};\n\t},\n};\n</script>\n\n<style scoped>\n.mode-toggle-container {\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n}\n\n.plants-container {\n\twidth: 330px;\n\theight: 90vh;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tmargin-left: 20px;\n\tborder-radius: 20px;\n\tbox-shadow: -10px 0 10px -5px grey;\n\n\tdisplay: inline-block;\n}\n\n.image-container {\n\tposition: relative;\n}\n\n.plant-image {\n\twidth: 98%;\n\tmax-height: 80vh;\n\tborder: 3px solid #b87d4b;\n\tborder-radius: 20px;\n\tbox-shadow: 0 5px 5px grey;\n}\n\n.settings-container {\n\tposition: relative;\n\tfloat: right;\n\tmax-width: 95vw;\n\tmargin-right: 2.5vw;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n}\n\n.name-input {\n\twidth: 100%;\n\tfont-size: 4rem;\n\tcolor: #3f463d;\n\tpadding-bottom: 1rem;\n}\n\n.settings {\n\twidth: 90%;\n\tmargin: 10%;\n}\n\n@media (min-width: 1200px) {\n\t.plant-image {\n\t\twidth: 50%;\n\t}\n}\n\n@media (max-width: 850px) {\n\t.plants-container {\n\t\tdisplay: none;\n\t}\n}\n</style>\n"],"sourceRoot":""}]}