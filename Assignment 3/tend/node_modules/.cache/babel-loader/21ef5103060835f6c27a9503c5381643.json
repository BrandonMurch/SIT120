{"remainingRequest":"/home/brandon/Documents/Independent Programming/tend/node_modules/thread-loader/dist/cjs.js!/home/brandon/Documents/Independent Programming/tend/node_modules/babel-loader/lib/index.js!/home/brandon/Documents/Independent Programming/tend/node_modules/eslint-loader/index.js??ref--13-0!/home/brandon/Documents/Independent Programming/tend/src/store/modules/plants.js","dependencies":[{"path":"/home/brandon/Documents/Independent Programming/tend/src/store/modules/plants.js","mtime":1632342509400},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwovLyAgU3RvcmUgYWxsIHBsYW50IGRhdGEuIAppbXBvcnQgcGxhbnREYXRhIGZyb20gJy4uLy4uL2Fzc2V0cy9qc29uL3BsYW50cy5qc29uJzsKCnZhciBzdGF0ZSA9IGZ1bmN0aW9uIHN0YXRlKCkgewogIHJldHVybiB7CiAgICBwbGFudHM6IHBsYW50RGF0YQogIH07Cn07Cgp2YXIgZ2V0dGVycyA9IHsKICBhbGw6IGZ1bmN0aW9uIGFsbChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnBsYW50czsKICB9LAogIG9uZTogZnVuY3Rpb24gb25lKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7CiAgICAgIHJldHVybiBzdGF0ZS5wbGFudHMuZmluZChmdW5jdGlvbiAocGxhbnQpIHsKICAgICAgICByZXR1cm4gcGxhbnQuaWQgPT0gaWQ7CiAgICAgIH0pOwogICAgfTsKICB9LAogIGxhdGVzdDogZnVuY3Rpb24gbGF0ZXN0KHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUucGxhbnRzW3N0YXRlLnBsYW50cy5sZW5ndGggLSAxXTsKICB9LAogIGFsbFNwZWNpZXM6IGZ1bmN0aW9uIGFsbFNwZWNpZXMoc3RhdGUpIHsKICAgIHZhciBzcGVjaWVzTGlzdCA9IFtdOwogICAgc3RhdGUucGxhbnRzLmZvckVhY2goZnVuY3Rpb24gKHBsYW50KSB7CiAgICAgIGlmIChwbGFudC5zZXR0aW5ncy5zcGVjaWVzLmxlbmd0aCA+IDApIHsKICAgICAgICBzcGVjaWVzTGlzdC5wdXNoKHBsYW50LnNldHRpbmdzLnNwZWNpZXMpOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBzcGVjaWVzTGlzdC5zb3J0KCk7CiAgfSwKICBzcGVjaWVzOiBmdW5jdGlvbiBzcGVjaWVzKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHNwZWNpZXMpIHsKICAgICAgcmV0dXJuIHN0YXRlLnBsYW50cy5maW5kKGZ1bmN0aW9uIChwbGFudCkgewogICAgICAgIHJldHVybiBwbGFudC5zZXR0aW5ncy5zcGVjaWVzID09IHNwZWNpZXM7CiAgICAgIH0pOwogICAgfTsKICB9LAogIGNvbW1lbnRzOiBmdW5jdGlvbiBjb21tZW50cyhzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChpZCkgewogICAgICByZXR1cm4gc3RhdGUucGxhbnRzLmZpbmQoZnVuY3Rpb24gKHBsYW50KSB7CiAgICAgICAgcmV0dXJuIHBsYW50LmlkID09IGlkOwogICAgICB9KS5jb21tZW50czsKICAgIH07CiAgfSwKICBub3RlczogZnVuY3Rpb24gbm90ZXMoc3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoaWQpIHsKICAgICAgcmV0dXJuIHN0YXRlLnBsYW50cy5maW5kKGZ1bmN0aW9uIChwbGFudCkgewogICAgICAgIHJldHVybiBwbGFudC5pZCA9PSBpZDsKICAgICAgfSkubm90ZXM7CiAgICB9OwogIH0KfTsKdmFyIG11dGF0aW9ucyA9IHsKICBhZGQ6IGZ1bmN0aW9uIGFkZChzdGF0ZSwgbmFtZSkgewogICAgLy8gQWRkIGZ1dHVyZSB2ZXJpZmljYXRpb24uCiAgICB2YXIgbmV3UGxhbnQgPSB7CiAgICAgIGltYWdlU291cmNlOiAiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE2MDk4NDMwMjU3ODMtNmE2NmE4ZjQ1ZTBjP2l4bGliPXJiLTEuMi4xJml4aWQ9TW53eE1qQTNmREI4TUh4d2FHOTBieTF3WVdkbGZIeDhmR1Z1ZkRCOGZIeDgmYXV0bz1mb3JtYXQmZml0PWNyb3Amdz0xMDAwJnE9ODAiLAogICAgICB0aXRsZTogIiIsCiAgICAgIHN1YnRpdGxlOiBuYW1lLAogICAgICB0ZXh0OiAiIiwKICAgICAgaWQ6IHN0YXRlLnBsYW50c1tzdGF0ZS5wbGFudHMubGVuZ3RoIC0gMV0uaWQgKyAxLAogICAgICBzZXR0aW5nczogewogICAgICAgIG5vdGVzOiBbXSwKICAgICAgICBzcGVjaWVzOiAiIiwKICAgICAgICAnaW5kb29yLW91dGRvb3InOiAiSW5kb29ycyIsCiAgICAgICAgbG9jYXRpb25FbmFibGVkOiBmYWxzZQogICAgICB9LAogICAgICBhY3Rpb25zOiBbXSwKICAgICAgY29tbWVudHM6IFtdCiAgICB9OwogICAgc3RhdGUucGxhbnRzLnB1c2gobmV3UGxhbnQpOwogIH0sCiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3RhdGUsIHBsYW50VG9VcGRhdGUpIHsKICAgIHZhciBpbmRleCA9IHN0YXRlLnBsYW50cy5maW5kSW5kZXgoZnVuY3Rpb24gKHBsYW50KSB7CiAgICAgIHJldHVybiBwbGFudC5pZCA9PT0gcGxhbnRUb1VwZGF0ZS5pZDsKICAgIH0pOwogICAgc3RhdGUucGxhbnRzW2luZGV4XSA9IHBsYW50VG9VcGRhdGU7CiAgfSwKICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoc3RhdGUsIHBsYW50SWQpIHsKICAgIHN0YXRlLnBsYW50cyA9IHN0YXRlLnBsYW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYW50KSB7CiAgICAgIHJldHVybiBwbGFudC5pZCAhPT0gcGxhbnRJZDsKICAgIH0pOwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgYWRkQ29tbWVudDogZnVuY3Rpb24gYWRkQ29tbWVudChfcmVmLCBfcmVmMikgewogICAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSwKICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdCwKICAgICAgICByb290U3RhdGUgPSBfcmVmLnJvb3RTdGF0ZTsKICAgIHZhciBpZCA9IF9yZWYyLmlkLAogICAgICAgIGNvbW1lbnQgPSBfcmVmMi5jb21tZW50OwogICAgdmFyIHBsYW50ID0gc3RhdGUucGxhbnRzLmZpbmQoZnVuY3Rpb24gKHBsYW50KSB7CiAgICAgIHJldHVybiBwbGFudC5pZCA9PT0gaWQ7CiAgICB9KTsKICAgIHZhciBuZXdfY29tbWVudCA9IHsKICAgICAgaWQ6IChwbGFudC5jb21tZW50cy5sZW5ndGggPiAwID8gcGxhbnQuY29tbWVudHNbMF0uaWQgOiAxMDAxKSArIDEsCiAgICAgIGJvZHk6IGNvbW1lbnQsCiAgICAgIGRhdGV0aW1lOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksCiAgICAgIHVzZXI6IHJvb3RTdGF0ZS51c2VyLm5hbWUKICAgIH07CiAgICBwbGFudC5jb21tZW50cy51bnNoaWZ0KG5ld19jb21tZW50KTsKICAgIGNvbW1pdCgndXBkYXRlJywgcGxhbnQpOwogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHN0YXRlLAogIGdldHRlcnM6IGdldHRlcnMsCiAgbXV0YXRpb25zOiBtdXRhdGlvbnMsCiAgYWN0aW9uczogYWN0aW9ucwp9Ow=="},{"version":3,"sources":["/home/brandon/Documents/Independent Programming/tend/src/store/modules/plants.js"],"names":["plantData","state","plants","getters","all","one","id","find","plant","latest","length","allSpecies","speciesList","forEach","settings","species","push","sort","comments","notes","mutations","add","name","newPlant","imageSource","title","subtitle","text","locationEnabled","actions","update","plantToUpdate","index","findIndex","delete","plantId","filter","addComment","commit","rootState","comment","new_comment","body","datetime","Date","toISOString","user","unshift","namespaced"],"mappings":"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","sourcesContent":["//  Store all plant data. \n\nimport plantData from '../../assets/json/plants.json';\n\nconst state = () => {\n    return {\n        plants: plantData\n    }\n}\n\n\nconst getters = {\n    all: (state) => {\n        return state.plants;\n    },\n    one: (state) => (id) => {\n        return state.plants.find(plant => plant.id == id);\n    },\n    latest: (state) => {\n        return state.plants[state.plants.length - 1];\n    },\n    allSpecies: (state) => {\n        const speciesList = []\n        state.plants.forEach(plant => {\n            if (plant.settings.species.length > 0) {\n                speciesList.push(plant.settings.species);\n\n            }\n        });\n        return speciesList.sort();\n\n    },\n    species: (state) => (species) => {\n        return state.plants.find(plant => plant.settings.species == species);\n    },\n    comments: (state) => (id) => {\n        return state.plants.find(plant => plant.id == id).comments\n    },\n    notes: (state) => (id) => {\n        return state.plants.find(plant => plant.id == id).notes\n    },\n}\n\nconst mutations = {\n    add(state, name) {\n        // Add future verification.\n        const newPlant = {\n            imageSource: \"https://images.unsplash.com/photo-1609843025783-6a66a8f45e0c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1000&q=80\",\n            title: \"\",\n            subtitle: name,\n            text: \"\",\n            id: state.plants[state.plants.length - 1].id + 1,\n            settings: {\n                notes: [],\n                species: \"\",\n                'indoor-outdoor': \"Indoors\",\n                locationEnabled: false,\n            },\n            actions: [],\n            comments: []\n        };\n        state.plants.push(newPlant);\n    },\n\n    update(state, plantToUpdate) {\n        const index = state.plants.findIndex(plant => plant.id === plantToUpdate.id);\n        state.plants[index] = plantToUpdate;\n    },\n\n    delete(state, plantId) {\n        state.plants = state.plants.filter(plant => plant.id !== plantId);\n    },\n\n\n\n\n\n}\n\n\nconst actions = {\n    addComment({ state, commit, rootState }, { id, comment }) {\n        const plant = state.plants.find(plant => plant.id === id);\n        const new_comment = {\n            id: (plant.comments.length > 0 ? plant.comments[0].id : 1001) + 1,\n            body: comment,\n            datetime: new Date().toISOString(),\n            user: rootState.user.name,\n        }\n        plant.comments.unshift(new_comment)\n\n        commit('update', plant);\n\n    }\n}\n\n\n\n\nexport default {\n    namespaced: true,\n    state,\n    getters,\n    mutations,\n    actions\n}"]}]}