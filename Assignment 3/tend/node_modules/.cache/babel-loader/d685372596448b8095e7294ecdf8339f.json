{"remainingRequest":"/home/brandon/Documents/Independent Programming/tend/node_modules/thread-loader/dist/cjs.js!/home/brandon/Documents/Independent Programming/tend/node_modules/babel-loader/lib/index.js!/home/brandon/Documents/Independent Programming/tend/node_modules/eslint-loader/index.js??ref--13-0!/home/brandon/Documents/Independent Programming/tend/src/composables/mockPlantData.js","dependencies":[{"path":"/home/brandon/Documents/Independent Programming/tend/src/composables/mockPlantData.js","mtime":1632342199612},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/brandon/Documents/Independent Programming/tend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvYnJhbmRvbi9Eb2N1bWVudHMvSW5kZXBlbmRlbnQgUHJvZ3JhbW1pbmcvdGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7Ci8vIEEgZ3JvdXAgb2YgZnVuY3Rpb25zIHRoYXQgd2lsbCBtb2NrIGEgYmFja2VuZC4gVGhlc2UgY2FuIGVhc2lseSBiZSByZXBsYWNlZCB3aXRoIEFKQVggY2FsbHMgd2hlbiBhIGJhY2tlbmQgaGFzIGJlZW4gc2V0dXAuCmltcG9ydCBwbGFudERhdGEgZnJvbSAiLi4vYXNzZXRzL2pzb24vcGxhbnRzLmpzb24iOwppbXBvcnQgeyByZWYgfSBmcm9tICJ2dWUiOwp2YXIgTlVNQkVSX09GX1BMQU5UUyA9IDc7IC8vIFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGRhdGEgc2V0IHdpbGwgYmUgcmVwZWF0ZWQKCnZhciBEQVRBX1NJWkVfTVVMVElQTEVSID0gNTsgLy8gCi8vIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY3JlYXRlIGR1cGxpY2F0ZWQgaW1hZ2VzLiAKCmV4cG9ydCB2YXIgcGxhbnRGYWN0b3J5ID0gZnVuY3Rpb24gcGxhbnRGYWN0b3J5KCkgewogIHZhciBjdXJyZW50SW1hZ2VSb3VuZCA9IHJlZigwKTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIGltYWdlcyA9IFtdOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgREFUQV9TSVpFX01VTFRJUExFUjsgaSsrKSB7CiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgTlVNQkVSX09GX1BMQU5UUzsgaisrKSB7CiAgICAgICAgdmFyIGNvcHkgPSBfb2JqZWN0U3ByZWFkKHt9LCBwbGFudERhdGFbal0pOwoKICAgICAgICBjb3B5LmJhc2VJZCA9IHBsYW50RGF0YVtqXS5pZDsKICAgICAgICBjb3B5LmlkID0gY29weS5pZCArIE5VTUJFUl9PRl9QTEFOVFMgKiBpICsgY3VycmVudEltYWdlUm91bmQudmFsdWUgKiBEQVRBX1NJWkVfTVVMVElQTEVSICogTlVNQkVSX09GX1BMQU5UUzsKICAgICAgICBpbWFnZXMucHVzaChjb3B5KTsKICAgICAgfQogICAgfQoKICAgIGN1cnJlbnRJbWFnZVJvdW5kLnZhbHVlKys7CiAgICByZXR1cm4gaW1hZ2VzOwogIH07Cn07"},{"version":3,"sources":["/home/brandon/Documents/Independent Programming/tend/src/composables/mockPlantData.js"],"names":["plantData","ref","NUMBER_OF_PLANTS","DATA_SIZE_MULTIPLER","plantFactory","currentImageRound","images","i","j","copy","baseId","id","value","push"],"mappings":";AAAA;AAGA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,SAASC,GAAT,QAAoB,KAApB;AAEA,IAAMC,gBAAgB,GAAG,CAAzB,C,CACA;;AACA,IAAMC,mBAAmB,GAAG,CAA5B,C,CACA;AAGA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,MAAMC,iBAAiB,GAAGJ,GAAG,CAAC,CAAD,CAA7B;AAEA,SAAO,YAAM;AACT,QAAMK,MAAM,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,mBAApB,EAAyCI,CAAC,EAA1C,EAA8C;AAC1C,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,gBAApB,EAAsCM,CAAC,EAAvC,EAA2C;AACvC,YAAIC,IAAI,qBAAQT,SAAS,CAACQ,CAAD,CAAjB,CAAR;;AACAC,QAAAA,IAAI,CAACC,MAAL,GAAcV,SAAS,CAACQ,CAAD,CAAT,CAAaG,EAA3B;AACAF,QAAAA,IAAI,CAACE,EAAL,GAAUF,IAAI,CAACE,EAAL,GAAUT,gBAAgB,GAAGK,CAA7B,GAAiCF,iBAAiB,CAACO,KAAlB,GAA0BT,mBAA1B,GAAgDD,gBAA3F;AACAI,QAAAA,MAAM,CAACO,IAAP,CAAYJ,IAAZ;AACH;AACJ;;AAEDJ,IAAAA,iBAAiB,CAACO,KAAlB;AAEA,WAAON,MAAP;AACH,GAfD;AAkBH,CArBM","sourcesContent":["// A group of functions that will mock a backend. These can easily be replaced with AJAX calls when a backend has been setup.\n\n\nimport plantData from \"../assets/json/plants.json\";\nimport { ref } from \"vue\";\n\nconst NUMBER_OF_PLANTS = 7;\n// The number of times the data set will be repeated\nconst DATA_SIZE_MULTIPLER = 5;\n// \n\n\n// Creates a function that will create duplicated images. \nexport const plantFactory = () => {\n    const currentImageRound = ref(0);\n\n    return () => {\n        const images = [];\n\n        for (let i = 0; i < DATA_SIZE_MULTIPLER; i++) {\n            for (let j = 0; j < NUMBER_OF_PLANTS; j++) {\n                let copy = { ...plantData[j] };\n                copy.baseId = plantData[j].id;\n                copy.id = copy.id + NUMBER_OF_PLANTS * i + currentImageRound.value * DATA_SIZE_MULTIPLER * NUMBER_OF_PLANTS;\n                images.push(copy);\n            }\n        }\n\n        currentImageRound.value++;\n\n        return images;\n    }\n\n\n};\n"]}]}