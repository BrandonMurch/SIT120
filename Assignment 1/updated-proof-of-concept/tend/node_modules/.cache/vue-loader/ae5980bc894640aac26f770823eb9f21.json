{"remainingRequest":"/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/src/components/ImageGallery.vue?vue&type=style&index=0&id=4f2773e8&scoped=true&lang=css","dependencies":[{"path":"/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/src/components/ImageGallery.vue","mtime":1627913741657},{"path":"/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1627652267000},{"path":"/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/node_modules/vue-loader-v16/dist/index.js","mtime":1627652267000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICAuZ2FsbGVyeS1jb250YWluZXIgewogICAgICAgIG1hcmdpbjogYXV0bzsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgfQoKICAgIC5nYWxsZXJ5LWNvbHVtbiB7CiAgICAgICAgd2lkdGg6IDI1MHB4OwogICAgICAgIG1hcmdpbjogMC41cmVtOwp9Cg=="},{"version":3,"sources":["/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/src/components/ImageGallery.vue"],"names":[],"mappings":";IA8EI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjB;;IAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACZ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB","file":"/home/brandon/Documents/SIT120 - Responsive Web Apps/code/Assignment 1/proof-of-concept/src/components/ImageGallery.vue","sourceRoot":"","sourcesContent":["<template>\n    <div  class=\"gallery-container\">\n        <PopUp \n            v-if=\"popupImage\" \n            v-bind=\"popupImage\" \n            @close=\"popupImage = null\"\n        />\n        <div class=\"gallery-column\" v-for=\"(column, index) in imageColumns\" :key=\"index\">\n            <ImageCard \n                v-for=\"image in column\" \n                :key = image.id\n                v-bind=\"image\" \n                @click=\"popupImage = image\"\n            />\n        </div>        \n    </div>\n</template>\n\n<script>\nimport ImageCard from './ImageCard.vue';\nimport PopUp from './PopUp.vue';\nimport { debounce } from '../assets/javascript/debounce'\n\nexport default {\n    name: 'ImageGallery',\n    components: {\n        ImageCard,\n        PopUp,\n    },\n    props: {\n        images: Array\n    },\n    /*\n        For monitoring the resize of the window, I use the lifecycle hooks\n        to create global event listeners. When the component is unmounted,\n        the listener will be removed. \n\n        https://vuejs.org/v2/api/#Options-Lifecycle-Hooks\n        https://vuejs.org/v2/api/#created\n        https://vuejs.org/v2/api/#mounted\n        https://www.w3schools.com/js/js_htmldom_eventlistener.asp\n    */\n    created() {\n        window.addEventListener(\"resize\", this.debounceUpdateSize)\n    },\n    unmounted() {\n        window.removeEventListener(\"resize\", this.debounceUpdateSize)\n    },\n    methods: {\n        updateColumnsOnResize() {\n            this.imageColumns = this.splitImagesIntoColumns();\n        },\n        // Split images into a 2d array of columns first, then images.\n        splitImagesIntoColumns() {\n            const columns = Math.floor(window.innerWidth / 265)\n            const columnQueue = [];\n            for (let i = 0; i < columns; i++) {\n                columnQueue[i] = [];\n            }\n            for (let i = 0; i < this.images.length; i++) {\n                columnQueue[i % columns].push(this.images[i]);\n            }\n            return columnQueue;\n        },\n    }, \n    data () {\n        return {\n            imageColumns: this.splitImagesIntoColumns(),\n            popupImage: null,\n            // Use data to properly remove event listener;\n            debounceUpdateSize: debounce(this.updateColumnsOnResize),\n        }\n    },\n\n}\n</script>\n\n<style scoped>\n    .gallery-container {\n        margin: auto;\n        display: flex;\n    }\n\n    .gallery-column {\n        width: 250px;\n        margin: 0.5rem;\n}\n</style>"]}]}